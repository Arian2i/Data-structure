سوال ۲ فصل ۳
🎯 هدف این سه خط کد چیست؟
python
Copy
Edit
for i in range(n + 1):
    for j in range(m + 1):
        result[i + j] += P[i] * Q[j]
این کد دارد ضرب چندجمله‌ای‌ها را طبق قانون توزیع (distributive) انجام می‌دهد:

هر جمله از P را در هر جمله از Q ضرب می‌کند و ضریب حاصل را در مکان مناسب result جمع می‌کند.

✅ مثال:
فرض کن:

python
Copy
Edit
P = [3, 2, 1]  # یعنی 3x^2 + 2x + 1
Q = [5, 4]     # یعنی 5x + 4
ابتدا این آرایه‌ها را معکوس می‌کنیم تا در قالب P[i] = ضریب x^i باشند:

python
Copy
Edit
P = [1, 2, 3]  # یعنی 1 + 2x + 3x^2
Q = [4, 5]     # یعنی 4 + 5x
حالا:

n = 2 (درجه‌ی P)

m = 1 (درجه‌ی Q)

result = [0] * (n + m + 1) = [0, 0, 0, 0] برای x^0 تا x^3

🧠 حلقه‌ی اول: i = 0 (یعنی ضریب x^0 در P → P[0] = 1)
j = 0 → Q[0] = 4 → ضرب: 1×4 = 4 → توان = i + j = 0 → result[0] += 4 → [4, 0, 0, 0]

j = 1 → Q[1] = 5 → ضرب: 1×5 = 5 → توان = i + j = 1 → result[1] += 5 → [4, 5, 0, 0]

حلقه‌ی دوم: i = 1 (یعنی ضریب x^1 در P → P[1] = 2)
j = 0 → 2×4 = 8 → توان = 1 → result[1] += 8 → [4, 13, 0, 0]

j = 1 → 2×5 = 10 → توان = 2 → result[2] += 10 → [4, 13, 10, 0]

حلقه‌ی سوم: i = 2 (یعنی ضریب x^2 در P → P[2] = 3)
j = 0 → 3×4 = 12 → توان = 2 → result[2] += 12 → [4, 13, 22, 0]

j = 1 → 3×5 = 15 → توان = 3 → result[3] += 15 → [4, 13, 22, 15]

✅ نتیجه‌ی نهایی:
python
Copy
Edit
result = [4, 13, 22, 15]
# ولی چون ضرایب نزولی هستند، باید برعکسش کنیم:
result[::-1] = [15, 22, 13, 4]
یعنی:

15
𝑥
3
+
22
𝑥
2
+
13
𝑥
+
4
15x 
3
 +22x 
2
 +13x+4
🔁 جمع‌بندی کد:
کد	عملکرد
P[i] * Q[j]	ضرب هر جمله از P در هر جمله از Q
i + j	تعیین توان x نتیجه ضرب
result[i + j] += ...	اضافه کردن به ضریب متناظر x^(i+j)

اگه خواستی، می‌تونم یه جدول هم بکشم که این ضرب‌ها رو به صورت ماتریسی نشون بده تا بهتر ببینی کجا چی می‌ره.


سوال ۸ فصل ۳

🧠 توضیح خط به خط:
text = input("...")
رشته‌ای را از ورودی می‌گیرد (مثلاً hello یا abcdefg).

n = len(text)
طول رشته را محاسبه می‌کند تا بدانیم چند بار می‌توان حلقه را اجرا کرد.

for length in [2, 3, 4]:
می‌خواهیم زیررشته‌هایی با طول‌های ۲، ۳، و ۴ را پیدا کنیم. در این حلقه، length به ترتیب ۲، سپس ۳، سپس ۴ می‌شود.

for i in range(n - length + 1):
برای هر موقعیت شروع i از ۰ تا n - length:

اگر مثلاً text = "hello" و length = 2، i از ۰ تا ۳ می‌چرخد چون ۵ - ۲ + 1 = 4.

substr = text[i:i+length]
با برش (slicing)، زیررشته‌ای با طول length از موقعیت i را می‌سازد.

print(substr)
زیررشته تولید شده را چاپ می‌کند.

✨ نمونه اجرا:
yaml
Copy
Edit
لطفاً یک رشته وارد کنید: hello

زیررشته‌های با طول 2:
he
el
ll
lo

زیررشته‌های با طول 3:
hel
ell
llo

زیررشته‌های با طول 4:
hell
ello
